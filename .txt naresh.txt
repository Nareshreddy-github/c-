#include <iostream>
#include <vector>
#include <unordered_map>

// Function to find two indices such that their values add up to the target
std::vector<int> twoSum(const std::vector<int>& nums, int target) {
    // Create an unordered map to store numbers and their indices
    std::unordered_map<int, int> num_map;

    // Loop through each element in the array
    for (int i = 0; i < nums.size(); ++i) {
        // Calculate the complement that we need to find
        int complement = target - nums[i];

        // Check if the complement is already in the map
        if (num_map.find(complement) != num_map.end()) {
            // If found, return the indices of the current number and the complement
            return {num_map[complement], i};
        }

        // If not found, store the index of the current number in the map
        num_map[nums[i]] = i;
    }

    // Should never reach here since the problem guarantees one solution
    return {};
}

int main() {
    // Example 1
    std::vector<int> nums1 = {2, 7, 11, 15};
    int target1 = 9;
    std::vector<int> result1 = twoSum(nums1, target1);
    std::cout << "Indices: [" << result1[0] << ", " << result1[1] << "]" << std::endl;

    // Example 2
    std::vector<int> nums2 = {3, 2, 4};
    int target2 = 6;
    std::vector<int> result2 = twoSum(nums2, target2);
    std::cout << "Indices: [" << result2[0] << ", " << result2[1] << "]" << std::endl;

    // Example 3
    std::vector<int> nums3 = {3, 3};
    int target3 = 6;
    std::vector<int> result3 = twoSum(nums3, target3);
    std::cout << "Indices: [" << result3[0] << ", " << result3[1] << "]" << std::endl;

    return 0;
}
